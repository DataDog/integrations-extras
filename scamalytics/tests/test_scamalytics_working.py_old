import pytest
from datadog_checks.base import ConfigurationError
from datadog_checks.scamalytics import ScamalyticsCheck


@pytest.mark.unit
def test_config_validation():
    """
    Ensure that ScamalyticsCheck raises ConfigurationError for invalid instance configs.
    Mirrors Datadog's AwesomeCheck test structure.
    """

    # Empty instance should fail
    with pytest.raises(ConfigurationError):
        ScamalyticsCheck('scamalytics', {}, [{}])

    # Missing some required keys
    incomplete_instance = {
        'scamalytics_api_key': 'test_key'
    }
    with pytest.raises(ConfigurationError):
        ScamalyticsCheck('scamalytics', {}, [incomplete_instance])

    # Valid config (should not raise)
    valid_instance = {
        'scamalytics_api_key': 'test_key',
        'scamalytics_api_url': 'https://api11.scamalytics.com/tiprem/?ip=',
        'customer_id': 'test_customer',
        'dd_api_key': 'test_dd_key',
        'dd_app_key': 'test_dd_app',
    }

    # Should initialize successfully
    check = ScamalyticsCheck('scamalytics', {}, [valid_instance])
    assert check.instance == valid_instance

