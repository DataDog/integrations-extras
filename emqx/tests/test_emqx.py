import pytest

from datadog_checks.dev.utils import get_metadata_metrics
from datadog_checks.emqx.check import EmqxCheck

EXPECTED_METRICS = {
    "emqx.connections.count",
    "emqx.live.connections.count",
    "emqx.sessions.count",
    "emqx.topics.count",
    "emqx.suboptions.count",
    "emqx.subscribers.count",
    "emqx.subscriptions.count",
    "emqx.subscriptions.shared.count",
    "emqx.retained.count",
    "emqx.delayed.count",
    "emqx.vm.cpu.use",
    "emqx.vm.cpu.idle",
    "emqx.vm.run_queue",
    "emqx.vm.process.messages_in_queues",
    "emqx.vm.total_memory",
    "emqx.vm.used_memory",
    "emqx.cluster.nodes_running",
    "emqx.cluster.nodes_stopped",
    "emqx.bytes.received.count",
    "emqx.bytes.sent.count",
    "emqx.packets.received.count",
    "emqx.packets.sent.count",
    "emqx.packets.connack.sent.count",
    "emqx.packets.connect.count",
    "emqx.packets.connack.error.count",
    "emqx.packets.connack.auth_error.count",
    "emqx.packets.publish.received.count",
    "emqx.packets.publish.sent.count",
    "emqx.packets.publish.inuse.count",
    "emqx.packets.publish.error.count",
    "emqx.packets.publish.auth_error.count",
    "emqx.packets.publish.dropped.count",
    "emqx.packets.puback.received.count",
    "emqx.packets.puback.sent.count",
    "emqx.packets.puback.inuse.count",
    "emqx.packets.puback.missed.count",
    "emqx.packets.pubrec.received.count",
    "emqx.packets.pubrec.sent.count",
    "emqx.packets.pubrec.inuse.count",
    "emqx.packets.pubrec.missed.count",
    "emqx.packets.pubrel.received.count",
    "emqx.packets.pubrel.sent.count",
    "emqx.packets.pubrel.missed.count",
    "emqx.packets.pubcomp.received.count",
    "emqx.packets.pubcomp.sent.count",
    "emqx.packets.pubcomp.inuse.count",
    "emqx.packets.pubcomp.missed.count",
    "emqx.packets.subscribe.received.count",
    "emqx.packets.subscribe.error.count",
    "emqx.packets.subscribe.auth_error.count",
    "emqx.packets.suback.sent.count",
    "emqx.packets.unsuback.sent.count",
    "emqx.packets.unsubscribe.received.count",
    "emqx.packets.unsubscribe.error.count",
    "emqx.packets.pingreq.received.count",
    "emqx.packets.pingresp.sent.count",
    "emqx.packets.disconnect.received.count",
    "emqx.packets.disconnect.sent.count",
    "emqx.packets.auth.received.count",
    "emqx.packets.auth.sent.count",
    "emqx.messages.received.count",
    "emqx.messages.sent.count",
    "emqx.messages.qos0.received.count",
    "emqx.messages.qos0.sent.count",
    "emqx.messages.qos1.received.count",
    "emqx.messages.qos1.sent.count",
    "emqx.messages.qos2.received.count",
    "emqx.messages.qos2.sent.count",
    "emqx.messages.publish.count",
    "emqx.messages.dropped.count",
    "emqx.messages.dropped.expired.count",
    "emqx.messages.dropped.no_subscribers.count",
    "emqx.messages.forward.count",
    "emqx.messages.retained.count",
    "emqx.messages.delayed.count",
    "emqx.messages.delivered.count",
    "emqx.messages.acked.count",
    "emqx.delivery.dropped.count",
    "emqx.delivery.dropped.no_local.count",
    "emqx.delivery.dropped.too_large.count",
    "emqx.delivery.dropped.qos0.msg.count",
    "emqx.delivery.dropped.queue_full.count",
    "emqx.delivery.dropped.expired.count",
    "emqx.client.connect.count",
    "emqx.client.connack.count",
    "emqx.client.connected.count",
    "emqx.client.authenticate.count",
    "emqx.client.auth_anonymous.count",
    "emqx.client.authorize.count",
    "emqx.client.subscribe.count",
    "emqx.client.unsubscribe.count",
    "emqx.client.disconnected.count",
    "emqx.session.created.count",
    "emqx.session.resumed.count",
    "emqx.session.takenover.count",
    "emqx.session.discarded.count",
    "emqx.session.terminated.count",
    "emqx.authorization.allow.count",
    "emqx.authorization.deny.count",
    "emqx.authorization.cache_hit.count",
    "emqx.authorization.superuser.count",
    "emqx.authorization.nomatch.count",
    "emqx.authorization.matched_allow.count",
    "emqx.authorization.matched_deny.count",
    "emqx.authentication.success.count",
    "emqx.authentication.success_anonymous.count",
    "emqx.authentication.failure.count",
    "emqx.mria.last_intercepted_trans",
    "emqx.mria.weight",
    "emqx.mria.replicants",
    "emqx.mria.server.mql",
}


@pytest.mark.unit
def test_mock_assert_metrics(dd_run_check, aggregator, check, mock_metrics):
    dd_run_check(check)
    for metric_name in EXPECTED_METRICS:
        aggregator.assert_metric(metric_name)
    aggregator.assert_all_metrics_covered()
    aggregator.assert_metrics_using_metadata(get_metadata_metrics())
    aggregator.assert_service_check("emqx.openmetrics.health", status=EmqxCheck.OK)
